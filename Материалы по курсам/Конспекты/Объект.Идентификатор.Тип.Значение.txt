
Объект - абстракция для данных, которые в момент исполнения лежат в оперативной памяти компъютера
в виде 0 и 1
Объект - это некоторый контейнер в опер. памяти, который содержит данные
Неверно сказать, что все данные представлены лишь объектами. Вернее сказать что все данные это - 
объекты и отношения между этими объектами

Данные это - объекты и отношения между объектами

Объект состоиз из идентификатора, типа и значения:

1) Идентификатор позволяет отличить 1 объект от другого в любой момент времени, 
так как не меняется с самого создания
2)Тип определяет то, что мы можем сделать с объектом. Тип определяет поведение объекта и возможные поведения объекта
Тип не может быть изменен после создания объекта (как и идентификатор)
3)Значение
Если элемент может изменять значение, то его называют mutable object
Если элемент не может изменять значение, то его называют immutable object
Возможность объекта изменять значение чаще всего зависит от типа объекта
mutable object:
list | dict | set
immutable object:
int | float | complex | bool | tuple | str | frozenset

*frozenset - неизменяемый тип множества
*complex - комплексные числа

list - это изменяемая последовательность ссылок на объекты. Мы можем изменить ссылки, а именно поменять 
местами, добавить и тд.
tuple - это неизменяемая последовательность ссылок на объекты. Мы не можем после создания как-то изменить кортеж
str - это неизменяемая последовательность. Однако вместо ссылок на объекты, мы храним последовательность символов в юникоде.

Оператор присваивания запоминает за именем переменной из левой части идентификатор объекта из правой части

Переменная это лишь ссылка на объект,а потому значение переменной это всегда значение объекта

*Мутация изменяемого типа объекта повлечет и изменение всех переменных, которые на него ссылаются

Особенности ссылок:
1) Для неизменяемых типов данных:
Каждый раз, когда интерпретатор встречает неизменяемый тип данных он не всегда создает новый объект.
Так если a = 1
         b = 1
Интепретатор в первый раз создаст новый объект = 1
А для переменной b ему не нужно создавать новый объект, он может переиспользовать уже созданный (1)
Но если встретит новый объект, допустим 24, он вновь создаст отдельный контейнер для этого данного,
а потом просто будет переиспользовать его
2) Для изменяемых типов данных:
Каждый раз, когда интерпретатор встречает изменяемый тип данных, он всегда создает новый объект

